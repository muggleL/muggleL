<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Muggle L</title>
    <link>https://blog.mygoooosh.com/categories/golang/</link>
    <description>Recent content in golang on Muggle L</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 21 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mygoooosh.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üê¨golang ‰ΩøÁî® socks5 ‰ª£ÁêÜ</title>
      <link>https://blog.mygoooosh.com/note/2019/05/21/golang-use-socks5-proxy/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mygoooosh.com/note/2019/05/21/golang-use-socks5-proxy/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;golang.org/x/net/proxy&amp;#34; ) func main() { // create a socks5 dialer  dialer, err := proxy.SOCKS5(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:1080&amp;#34;, nil, proxy.Direct) if err != nil { _, _ = fmt.Fprintln(os.Stderr, &amp;#34;can&amp;#39;t connect to the proxy:&amp;#34;, err) os.Exit(1) } // setup a http client  httpTransport := &amp;amp;http.Transport{} httpClient := &amp;amp;http.Client{Transport: httpTransport} // set our socks5 as the dialer  httpTransport.Dial = dialer.Dial if resp, err := httpClient.</description>
    </item>
    
  </channel>
</rss>
